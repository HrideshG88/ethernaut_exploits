// SPDX-License-Identifier: MIT
pragma solidity 0.8.0;

contract Privacy {
    bool public locked = true; //slot 0
    uint256 public ID = block.timestamp; //slot 1, timestamp=1716258324
    uint8 private flattening = 10; //slot 2
    uint8 private denomination = 255; //slot 2
    uint16 private awkwardness = uint16(block.timestamp); //slot 2
    bytes32[3] private data; //slot 3,4,5 big endian

    constructor(bytes32[3] memory _data) {
        data = _data; //big endian
    }

    function unlock(bytes16 _key) public {
        require(_key == bytes16(data[2]));
        locked = false;
    }

    /*
    A bunch of super advanced solidity algorithms...

      ,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`
      .,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,
      *.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^         ,---/V\
      `*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.    ~|__(o.o)
      ^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'  UU  UU
    */
}

/* 
await web3.eth.getStorageAt(contract.address, 0, console.log)
"0x0000000000000000000000000000000000000000000000000000000000000001"
await web3.eth.getStorageAt(contract.address, 1, console.log)
"0x00000000000000000000000000000000000000000000000000000000664c0614"
await web3.eth.getStorageAt(contract.address, 2, console.log)
"0x000000000000000000000000000000000000000000000000000000000614ff0a"
await web3.eth.getStorageAt(contract.address, 3, console.log)
"0x88b3381d477a134158e47f5e32e867333fc8d4f2de4cf9cb25c307eeb268cddb"
await web3.eth.getStorageAt(contract.address, 4, console.log)
"0x74f6c2e7a8df5b4994dc70ee4f3edd85ae6e2c4afafd48e978a025da2a643328"
await web3.eth.getStorageAt(contract.address, 5, console.log)
"0x14690fdf857625e4fe6f798d6ad3c7dbf82a6b1a6c9c082c0c6cfca4d394c4b1"
await web3.eth.getStorageAt(contract.address, 6, console.log)
"0x0000000000000000000000000000000000000000000000000000000000000000"
*/
